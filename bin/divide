#!/usr/bin/env python
# -*- coding: utf-8 -*-

""" combinatorics """

# Standard Python modules
import time
import argparse

# Python modules
import numpy as np

# User-defined modules
import lib.io as lio
import lib.helper as lhelper
import lib.analysis as lanalysis

if __name__ == "__main__":
    print('')

    def parse_command_line():
        parser = argparse.ArgumentParser(description='combinatorics')
        parser.add_argument('-p', '--prefix',
                            help    = 'output prefix.',
                            dest    = 'prefix',
                            type    = str)
        parser.add_argument('-i', '--ijob',
                            help    = 'job index',
                            default = 0,
                            dest    = 'ijob',
                            type    = int)
        parser.add_argument('-n', '--njob',
                            help    = 'total number of z-slice',
                            default = 1,
                            dest    = 'njob',
                            type    = int)
        parser.add_argument('-t', '--time',
                            help    = 'save runtime',
                            action  = 'store_true',
                            default = False)
        params = parser.parse_args()
        return params

    args = parse_command_line()

    # set job helper
    job_helper = lhelper.JobHelper(args.njob)
    job_helper.set_current_job(args.ijob)

    # set timer
    time_dd = 0
    time_rr = 0
    time_d1r2 = 0
    time_d2r1 = 0

    # load preprocess data
    preprocess_params = lio.load('%s_preprocess.pkl' % args.prefix)
    rr_params = preprocess_params['rr']
    dd_params = preprocess_params['dd']
    d1r2_params = preprocess_params['d1r2']
    d2r1_params = preprocess_params['d2r1']
    bins = preprocess_params['bins']
    cosmos_list = preprocess_params['cosmos_list']
    helper = preprocess_params['helper']
    same = preprocess_params['same']

    # calculate f(theta)
    print('')
    start_time = time.time()
    ftheta = lanalysis.get_ftheta(
        tree_catalog    = rr_params['tree_catalog'],
        pair_catalog    = rr_params['pair_catalog'],
        tree            = rr_params['tree'],
        theta_max       = bins.max('theta'),
        theta_nbins     = bins.num_bins('theta'),
        job_helper      = job_helper,
        same            = same)
    time_rr = time.time()-start_time
    print("--- %f seconds ---" % time_rr)

    # calculate ztheta
    print('')
    start_time = time.time()
    ztheta_d1r2 = lanalysis.get_ztheta(
        tree_catalog    = d1r2_params['tree_catalog'],
        pair_catalog    = d1r2_params['pair_catalog'],
        tree            = d1r2_params['tree'],
        z_min           = bins.min('z'),
        z_max           = bins.max('z'),
        z_nbins         = bins.num_bins('z'),
        theta_max       = bins.max('theta'),
        theta_nbins     = bins.num_bins('theta'),
        job_helper      = job_helper,)
    time_d1r2 = time.time()-start_time
    print("--- %f seconds ---" % time_d1r2)

    if same:
        ztheta_d2r1 = np.copy(ztheta_d1r2)
    else:
        print('')
        start_time = time.time()
        ztheta_d2r1 = lanalysis.get_ztheta(
            tree_catalog    = d2r1_params['tree_catalog'],
            pair_catalog    = d2r1_params['pair_catalog'],
            tree            = d2r1_params['tree'],
            z_min           = bins.min('z'),
            z_max           = bins.max('z'),
            z_nbins         = bins.num_bins('z'),
            theta_max       = bins.max('theta'),
            theta_nbins     = bins.num_bins('theta'),
            job_helper      = job_helper,)
        time_d2r1= time.time()-start_time
        print("--- %f seconds ---" % time_d2r1)

    # calculate zztheta
    print('')
    start_time = time.time()
    zztheta = lanalysis.get_zztheta(
        tree_catalog    = dd_params['tree_catalog'],
        pair_catalog    = dd_params['pair_catalog'],
        tree            = dd_params['tree'],
        z_min           = bins.min('z'),
        z_max           = bins.max('z'),
        z_nbins         = bins.num_bins('z'),
        theta_max       = bins.max('theta'),
        theta_nbins     = bins.num_bins('theta'),
        job_helper      = job_helper,
        same            = same)
    time_dd = time.time()-start_time
    print("--- %f seconds ---" % time_dd)

    # store to helper object
    helper.ftheta = ftheta
    helper.ztheta_d1r2 = ztheta_d1r2
    helper.ztheta_d2r1 = ztheta_d2r1
    helper.zztheta = zztheta
    if args.ijob == 0:
        helper.cosmos_list = cosmos_list
        helper.bins = bins
    lio.save("%s_divide_%03d-%03d.pkl" % (args.prefix, args.ijob, args.njob),
             helper)
    print('')
